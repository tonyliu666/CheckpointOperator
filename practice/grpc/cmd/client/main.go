package main

import (
	"context"
	"flag"
	"fmt"

	"grpc-test/generated"
	"time"

	"google.golang.org/grpc"
)

var (
	address = flag.String("connect", "127.0.0.1:50051", "The server to connect to")

	command = flag.String("command", "create", "The command create or transfer")

	archiveDir     = flag.String("archiveDir", "", "Path of the checkpoint archive generated by kubelet")
	podName        = flag.String("podName", "", "Name of the pod")
	checkpointName = flag.String("checkpointName", "checkpoint", "The name of the checkpoint")

	target = flag.String("target", "127.0.0.1:50051", "Target of the transfer")
)

func main() {
	flag.Parse()
	conn, err := grpc.Dial(*address, grpc.WithInsecure())
	if err != nil {
		fmt.Println("Failed to connect to server:", err)
		return
	}
	defer conn.Close()
	client := generated.NewAgentClient(conn)
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer cancel()
	switch *command {
	case "create":
		image, err := client.CreateCheckpointImage(ctx, &generated.CreateCheckpointImageRequest{
			CheckpointArchiveLocation: *archiveDir,
			PodName:                   *podName,
			CheckpointName:            *checkpointName,
		})
		if err != nil {
			fmt.Println(err, "CreateCheckpointImage failed")
			return
		}
		fmt.Println(image)
	case "transfer":
		_, err = client.TransferCheckpoint(ctx, &generated.TransferCheckpointRequest{
			PodName:    *podName,
			TransferTo: *target,
		})
		if err != nil {
			fmt.Println(err, "TransferCheckpoint failed")
			return
		}
	default:
		fmt.Println("Invalid command")
		return
	}
	if err != nil {
		fmt.Println("Failed to execute command:", err)
		return
	}
	fmt.Println("Command executed successfully")
}
